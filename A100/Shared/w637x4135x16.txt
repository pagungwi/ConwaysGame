==PROF== Connected to process 1893565 (/home/sreinde/ECE8780/Conways/ConwaysGame/conway)
==PROF== Profiling "shared_Conways" - 0: 0%....50%....100% - 51 passes
Parallel Kernel Execution Time:
5.86313s
Serial Kernel Execution Times:
Serial Image Creation - Initial Board: 0.0439454s
Serial Conways: 0.0610706s
Serial Image Creation - Final Board: 0.0495232s
PASSED!
==PROF== Disconnected from process 1893565
[1893565] conway@127.0.0.1
  shared_Conways(uchar4 *, uchar4 *, int, int, int) (259, 40, 1)x(16, 16, 1), Context 1, Stream 7, Device 0, CC 8.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         1.51
    SM Frequency            cycle/nsecond         1.06
    Elapsed Cycles                  cycle      722,445
    Memory Throughput                   %        14.36
    DRAM Throughput                     %         0.89
    Duration                      usecond       681.31
    L1/TEX Cache Throughput             %         9.41
    L2 Cache Throughput                 %        18.80
    SM Active Cycles                cycle   715,561.31
    Compute (SM) Throughput             %        70.53
    ----------------------- ------------- ------------

    OPT   Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the   
          compute pipelines are spending their time doing. Also, consider whether any computation is redundant and      
          could be reduced or moved to look-up tables.                                                                  

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         1.85
    Executed Ipc Elapsed  inst/cycle         1.83
    Issue Slots Busy               %        46.23
    Issued Ipc Active     inst/cycle         1.85
    SM Busy                        %        71.19
    -------------------- ----------- ------------

    OPT   ALU is the highest-utilized pipeline (71.2%) based on active cycles, taking into account the rates of its     
          different instructions. It executes integer and logic operations. The pipeline is well-utilized, but might    
          become a bottleneck if more work is added. Based on the number of executed instructions, the highest          
          utilized pipeline (71.2%) is ALU. It executes integer and logic operations. Comparing the two, the overall    
          pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling     
          Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the    
          pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows  
          the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons    
          cause warps to stall.                                                                                         

    Section: Memory Workload Analysis
    --------------------------- ------------ ------------
    Metric Name                  Metric Unit Metric Value
    --------------------------- ------------ ------------
    Memory Throughput           Gbyte/second        17.06
    Mem Busy                               %         9.78
    Max Bandwidth                          %        14.36
    L1/TEX Hit Rate                        %        87.32
    L2 Compression Success Rate            %            0
    L2 Compression Ratio                                0
    L2 Hit Rate                            %        95.22
    Mem Pipes Busy                         %        21.54
    --------------------------- ------------ ------------

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 0.2947%                                                                                         
          The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          1.5 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 2.9 sectors per request, or 2.9*32 = 92.3 bytes of cache data transfers per request. The  
          optimal thread address pattern for 1.5 byte accesses would result in 1.5*32 = 47.7 bytes of cache data        
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.3557%                                                                                         
          The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          1.5 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 3.6 sectors per request, or 3.6*32 = 114.6 bytes of cache data transfers per request.     
          The optimal thread address pattern for 1.5 byte accesses would result in 1.5*32 = 47.7 bytes of cache data    
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.2763%                                                                                         
          The memory access pattern for local loads in L1TEX might not be optimal. On average, this kernel accesses 1.5 
          bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads,  
          results in 2.7 sectors per request, or 2.7*32 = 87.2 bytes of cache data transfers per request. The optimal   
          thread address pattern for 1.5 byte accesses would result in 1.5*32 = 47.7 bytes of cache data transfers per  
          request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced local loads.  
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.2763%                                                                                         
          The memory access pattern for local stores in L1TEX might not be optimal. On average, this kernel accesses    
          1.5 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 2.7 sectors per request, or 2.7*32 = 87.2 bytes of cache data transfers per request. The  
          optimal thread address pattern for 1.5 byte accesses would result in 1.5*32 = 47.7 bytes of cache data        
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced local stores.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.416%                                                                                          
          The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 4.107%                                                                                          
          The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 4.669%                                                                                          
          The memory access pattern for shared loads might not be optimal and causes on average a 2.0 - way bank        
          conflict across all 908831 shared load requests.This results in 902258 bank conflicts,  which represent       
          49.63% of the overall 1817861 wavefronts for shared loads. Check the Source Counters section for uncoalesced  
          shared loads.                                                                                                 
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 1.757%                                                                                          
          The memory access pattern for shared stores might not be optimal and causes on average a 1.4 - way bank       
          conflict across all 324859 shared store requests.This results in 83982 bank conflicts,  which represent       
          18.68% of the overall 449580 wavefronts for shared stores. Check the Source Counters section for uncoalesced  
          shared stores.                                                                                                

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        46.42
    Issued Warp Per Scheduler                        0.46
    No Eligible                            %        53.58
    Active Warps Per Scheduler          warp        10.24
    Eligible Warps Per Scheduler        warp         0.65
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 53.58%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.2 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of   
          10.24 active warps per scheduler, but only an average of 0.65 warps were eligible per cycle. Eligible warps   
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        22.07
    Warp Cycles Per Executed Instruction           cycle        22.08
    Avg. Active Threads Per Warp                                22.43
    Avg. Not Predicated Off Threads Per Warp                    22.31
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 63.92%                                                                                          
          On average, each warp of this kernel spends 14.1 cycles being stalled waiting on a fixed latency execution    
          dependency. Typically, this stall reason should be very low and only shows up as a top contributor in         
          already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the       
          number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to         
          lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents      
          about 63.9% of the total average of 22.1 cycles between issuing two instructions.                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 21.36%                                                                                          
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This kernel achieves an average of 22.4 threads being active per cycle. This is further reduced    
          to 22.3 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst   330,676.14
    Executed Instructions                           inst  142,852,093
    Avg. Issued Instructions Per Scheduler          inst   330,806.50
    Issued Instructions                             inst  142,908,407
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                 10,360
    Registers Per Thread             register/thread              34
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block       Kbyte/block            1.02
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block       Kbyte/block            1.30
    Threads                                   thread       2,652,160
    Waves Per SM                                               15.99
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block            6
    Block Limit Shared Mem                block           13
    Block Limit Warps                     block            8
    Theoretical Active Warps per SM        warp           48
    Theoretical Occupancy                     %           75
    Achieved Occupancy                        %        63.79
    Achieved Active Warps Per SM           warp        40.82
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 14.95%                                                                                          
          The difference between calculated theoretical (75.0%) and measured achieved occupancy (63.8%) can be the      
          result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can   
          occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices   
          Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on     
          optimizing occupancy.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 25%                                                                                             
          The 12.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the      
          hardware maximum of 16. This kernel's theoretical occupancy (75.0%) is limited by the number of required      
          registers.                                                                                                    

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.08
    Branch Instructions              inst   12,032,009
    Branch Efficiency                   %        86.28
    Avg. Divergent Branches                   2,517.44
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 59.2%                                                                                           
          This kernel has uncoalesced global accesses resulting in a total of 2209238 excessive sectors (63% of the     
          total 3516609 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source        
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 43.88%                                                                                          
          This kernel has uncoalesced shared accesses resulting in a total of 980926 excessive wavefronts (44% of the   
          total 2214616 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

