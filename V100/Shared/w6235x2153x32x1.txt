==PROF== Connected to process 1064345 (/home/peyabi/GPU_Programming/ConwaysGoL/ConwaysGame/conway)
==PROF== Profiling "shared_Conways" - 0: 0%....50%....100% - 74 passes
Parallel Kernel Execution Time:
1.94757s
Serial Kernel Execution Times:
Serial Image Creation - Initial Board: 0.134306s
Serial Conways: 0.378062s
Serial Image Creation - Final Board: 0.0886285s
PASSED!
==PROF== Disconnected from process 1064345
[1064345] conway@127.0.0.1
  shared_Conways(uchar4 *, uchar4 *, int, int, int) (68, 195, 1)x(32, 32, 1), Context 1, Stream 7, Device 0, CC 7.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/usecond       876.74
    SM Frequency            cycle/nsecond         1.31
    Elapsed Cycles                  cycle    3,933,824
    Memory Throughput                   %        14.68
    DRAM Throughput                     %         5.02
    Duration                      msecond         3.00
    L1/TEX Cache Throughput             %        20.88
    L2 Cache Throughput                 %        14.68
    SM Active Cycles                cycle 3,915,802.66
    Compute (SM) Throughput             %        78.95
    ----------------------- ------------- ------------

    OPT   Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the   
          compute pipelines are spending their time doing. Also, consider whether any computation is redundant and      
          could be reduced or moved to look-up tables.                                                                  

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         2.14
    Executed Ipc Elapsed  inst/cycle         2.13
    Issue Slots Busy               %        53.56
    Issued Ipc Active     inst/cycle         2.14
    SM Busy                        %        79.31
    -------------------- ----------- ------------

    OPT   ALU is the highest-utilized pipeline (79.3%) based on active cycles, taking into account the rates of its     
          different instructions. It executes integer and logic operations. The pipeline is well-utilized, but might    
          become a bottleneck if more work is added. Based on the number of executed instructions, the highest          
          utilized pipeline (42.6%) is ALU. It executes integer and logic operations. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the          
          pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows  
          the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons    
          cause warps to stall.                                                                                         

    Section: Memory Workload Analysis
    ----------------- ------------ ------------
    Metric Name        Metric Unit Metric Value
    ----------------- ------------ ------------
    Memory Throughput Gbyte/second        45.07
    Mem Busy                     %        10.64
    Max Bandwidth                %        14.68
    L1/TEX Hit Rate              %        88.09
    L2 Hit Rate                  %        94.26
    Mem Pipes Busy               %         6.38
    ----------------- ------------ ------------

    Section: Memory Workload Analysis Chart
    WRN   The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an  
          additional metric could enable the rule to provide more guidance.                                             

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 0.258%                                                                                          
          The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          1.4 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 2.3 sectors per request, or 2.3*32 = 73.0 bytes of cache data transfers per request. The  
          optimal thread address pattern for 1.4 byte accesses would result in 1.4*32 = 46.3 bytes of cache data        
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.4054%                                                                                         
          The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          1.4 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 3.4 sectors per request, or 3.4*32 = 108.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 1.4 byte accesses would result in 1.4*32 = 46.3 bytes of cache data    
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.3562%                                                                                         
          The memory access pattern for local loads in L1TEX might not be optimal. On average, this kernel accesses 1.4 
          bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads,  
          results in 2.9 sectors per request, or 2.9*32 = 93.6 bytes of cache data transfers per request. The optimal   
          thread address pattern for 1.4 byte accesses would result in 1.4*32 = 46.3 bytes of cache data transfers per  
          request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced local loads.  
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.3563%                                                                                         
          The memory access pattern for local stores in L1TEX might not be optimal. On average, this kernel accesses    
          1.4 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 2.9 sectors per request, or 2.9*32 = 93.6 bytes of cache data transfers per request. The  
          optimal thread address pattern for 1.4 byte accesses would result in 1.4*32 = 46.3 bytes of cache data        
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced local stores.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.4526%                                                                                         
          The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.3 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 3.8%                                                                                            
          The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.4 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        53.60
    Issued Warp Per Scheduler                        0.54
    No Eligible                            %        46.40
    Active Warps Per Scheduler          warp        13.87
    Eligible Warps Per Scheduler        warp         1.94
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 46.4%                                                                                     
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 1.9 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of   
          13.87 active warps per scheduler, but only an average of 1.94 warps were eligible per cycle. Eligible warps   
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        25.88
    Warp Cycles Per Executed Instruction           cycle        25.89
    Avg. Active Threads Per Warp                                23.59
    Avg. Not Predicated Off Threads Per Warp                    23.45
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 54.92%                                                                                          
          On average, each warp of this kernel spends 14.2 cycles being stalled waiting on a fixed latency execution    
          dependency. Typically, this stall reason should be very low and only shows up as a top contributor in         
          already highly optimized kernels. Try to hide the corresponding instruction latencies by increasing the       
          number of active warps, restructuring the code or unrolling loops. Furthermore, consider switching to         
          lower-latency instructions, e.g. by making use of fast math compiler options. This stall type represents      
          about 54.9% of the total average of 25.9 cycles between issuing two instructions.                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 21.1%                                                                                           
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This kernel achieves an average of 23.6 threads being active per cycle. This is further reduced    
          to 23.4 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst 2,096,603.06
    Executed Instructions                           inst  670,912,978
    Avg. Issued Instructions Per Scheduler          inst 2,097,110.55
    Issued Instructions                             inst  671,075,377
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                 1,024
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                 13,260
    Registers Per Thread             register/thread              32
    Shared Memory Configuration Size           Kbyte           16.38
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block       Kbyte/block            4.62
    Threads                                   thread      13,578,240
    Waves Per SM                                               82.88
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block            2
    Block Limit Shared Mem                block            3
    Block Limit Warps                     block            2
    Theoretical Active Warps per SM        warp           64
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        86.76
    Achieved Active Warps Per SM           warp        55.53
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 13.24%                                                                                          
          The difference between calculated theoretical (100.0%) and measured achieved occupancy (86.8%) can be the     
          result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can   
          occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices   
          Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on     
          optimizing occupancy.                                                                                         

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.09
    Branch Instructions              inst   57,844,323
    Branch Efficiency                   %        86.66
    Avg. Divergent Branches                  15,788.85
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 42.65%                                                                                          
          This kernel has uncoalesced global accesses resulting in a total of 8679199 excessive sectors (59% of the     
          total 14809291 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source       
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   

